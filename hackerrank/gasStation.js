// function canCompleteCircuit(A, B){
//     let start = 0,
//     end = 1,
//     totalGasAmountLeft = A[start] - B[start];
//     while(start != end || totalGasAmountLeft < 0){
//         while(start != end && totalGasAmountLeft < 0){
//             totalGasAmountLeft -= A[start] - B[start]
//             start = (start+1) % A.length
//             if(start == 0) return -1
//         }
//         totalGasAmountLeft+=A[end] - B[end]
//         end=(end+1)%A.length
//     }
//     return start || -1
// }
// let A = [959, 329, 987, 951, 942, 410, 282, 376, 581, 507, 546, 299, 564, 114, 474, 163, 953, 481, 337, 395, 679, 21, 335, 846, 878, 961, 663, 413, 610, 937, 32, 831, 239, 899, 659, 718, 738, 7, 209]
// let B = [862, 783, 134, 441, 177, 416, 329, 43, 997, 920, 289, 117, 573, 672, 574, 797, 512, 887, 571, 657, 420, 686, 411, 817, 185, 326, 891, 122, 496, 905, 910, 810, 226, 462, 759, 637, 517, 237, 884]


// function majorityElement(A){
//     let obj = {}
//     for(let i = 0; i < A.length; i++){
//         let count = obj[A[i]] || 0
//         obj[A[i]] = ++count
//         // console.log(obj)
//     }
//     let maxVal = null
//     console.log(obj)
//     for(let keys in obj){
//         if(obj[keys]>=Math.floor(A.length/2)){
//             maxVal = keys
//         }
//     }
//     console.log(maxVal)
//     return maxVal
// }
// let A = [1,1,2]
// // canCompleteCircuit(A, B)
// majorityElement(A)

// function candy(A){
//     let arr = []
//     for(let i = 0; i < A.length; i++){
//         arr[i] = 1
//     }
//     for(let i = 0; i < A.length-1; i++){
//         if(A[i+1] > A[i] && arr[i+1] <= arr[i]) arr[i+1] = arr[i]+1
//     }
//     let sum = 0
//     for(let i = A.length-2; i>=0; i--){
//         if(A[i]>A[i+1] && arr[i] <=arr[i+1]) arr[i] = arr[i+1]+1
//         else if(A[i]==A[i+1] && arr[i] <arr[i+1]) arr[i] = arr[i+1]+1
//         sum+=arr[i]
//     }
//     sum+=arr[A.length-1]
//     console.log(sum)
//     return sum
// }
// // let A = [-255, 369, 319, 77, 128, -202, -147, 282, -26, -489, -443, -401, 385, 465, -134, 126, 304, 179, 16, 112, 473, -467, 279, -233, 66, 76, 408, 148, -369, 328, 138, -164, 492, -276, -326, 170, 168, 189, 13, 383, 341, 426, 219, 337, -62, -197, 263, 338, -324, 261, 273, -74, -8, -133, 318, -100, 487, -196, -465, -495, -136, 94, -201, 491, 204, 323, 156, -337, -99, 115, 179, 184, -249, 76, -396, 265, 500, -83, 270, 438, -418, 401, -184, -247, -203, 190, 191, -282, -248, 465, 146, 7, -381, 326, -409, 474, 186, -206, 447, 17, 156, -273, 381, -307, -206, 164, -147, 58, -224, 284, 204, 267, 123, 141, -8, 225, -246, 12, 399, -261, -104, 191, 390, 152, 313, -91, 8, -476, -363, -183, -280, -282, -431, 366, 89, -166, -257, 132, 98, -387, 389, -219, -332, 227, 386, -33, 361, -308, -494, -33, 110, 423, -465, -417, 496, -333, -259, 402, 36, 380, -385, -329, 283, 389, 396, -161, 466, -405, -293, 442, 259, 377, -386, -386, 329, 204, 438, 346, -185, -401, -219, 213, 351, -18, -20, 364, 319, 187, 197, 122, -182, -126, -211, -448, 44, -360, -345, -147, 480, -387, 222, 92, -262, -409, 163, 323, -291, -61, -431, -288, -309, -490, -494, 328, -207, 398, 475, -228, -37, 44, 227, -371, -91, -440, 220, 39, -73, 80, -189, 37, 94, -96, -400, -380, 172, -179, -442, -119, 411, -184, 218, -18, 170, 430, -157, 345, 418, 390, -39, -85, 216, -197, -421, 328, -311, 160, 432, 104, -419, -140, -115, -202, 58, 415, 473, -87, 475, 430, 114, -314, 430, -419, 375, 258, 255, 42, -63, 54, -352, -337, -180, -31, 441, -382, -176, 209, -137, 171, -89, 155, 421, 308, -153, 254, -210, -245, 373, -435, -29, -398, 326, 297, 81, -157, 254, 52, 479, 356, -497, -16, 109, -353, -20, -122, -172, 23, 20, -344, 203, 372, -306, -9, 238, -190, 495, 9, -2, 125, 150, -180, -340, -1, -347, -269, -181, -15, 83, -304, -365, 490, -475, 161, 422, 440, -414, 380, -446, -404, -352, -144, -297, -62, -23, -223, 359, 127, 183, -20, 93, -285, -477, 223, 1, 131, -359, -74, 321, 197, 452, -338, 367, -337, 183, -41, 218, -75, -212, 208, 188, -38, 91, 332, 388, -185, -247, 405, -390, -371, 313, -471, 457, 307, 494, -467, -225, -3, -271, -164, -120, 101, 385, -12, 234, -368, -317, 167, 241, -494, -279, -288, 452, -499, 372, 464, 234, 16, 40, 264, -474, -400, 429, 33, 495, -285, 201, 190, 328, 127, 286, 312, 100, -24, 409, -392, 183, -69, -352, -56, -304, -261, -296, -140, 453, 253, -215, 195, 288, -300, 10, -104, -491, 275, -275, 175, 24, 387, 408]
// let A = [349, 3, -246, 196, 393, -249, -159, 412, -234, 279, 276, 184, 137, 437, 310, 148, -207, -258, -1, -99, 47, 63, -421, 377, 163, 67, 12, 138, 390, 296, -82, -340, 77, -179, -432, 376, -480, -489, 233, 121, 314, -457, -479, -481, -197, -287, -42, 161, -123, -493, -278, 206, 207, 188, 286, 10, 385, -393, -303, -151, 239, 307, 414, 422, 230, -201, -78, -445, 250, 364, 442, 344, -485, 45, 289, 310, -488, 255, 71, 262, 249, -368, 292, 286, -410, -470, -66, 104, 284, 0, -486, -68, -141, -142, -259, -431, -256, 326, 207, -379, -323, 174, 394, 493, 418, 378, -188, -249, -104, -197, -173, -328, 484, 159, -147, -99, 50, 312, 472, -481, 469, -53, 347, 234, 94, -65, 491, 100, 66, 202, 16, -119, 290, -141, -266, 335, 68, 465, -354, 150, -295, -218, 388, 443, -488, 398, -425, 108, 409, 316, 451, -216, 229, 164, -466, 131, -171, 236, 234, 17, -226, 123, 364, -125, 177, 59, 107, 450, -273, 1, 128, 129, -316, -456, 347, -12, 441, -217, -477, 382, -247, -178, 369, 331, -427, -195, -10, -331, 330, -360, 151, -458, 248, 223, 241, -223, 246, 74, -33, 237, -482, -241, 286, -127, 323, -79, 163, 351, 496, -307, -318, 449, -330, 37, 27, -295, -104, -285, 164, 145, -412, -55, -266, -384, 208, -7, -482, 35, -308, -401, -446, -199, -308, -433, -345, -326, -262, -223, 194, -237, 146, 303, -232, 335, 60, -27, -96, -104, 7, 474, -379, -472, -322, 333, 221, -252, 218, 305, -176, -53, 247, -303, 324, 153, 74, 102, -213, -128, 352, -195, 270, 79, -442, 178, -198, -127, -454, 155, -391, -359, -161, -62, 197, 394, 127, -447, 333, 93, 446, -171, 30, 271, 68, -455, 430, -32, -51, -220, -272, 473, 116, -138, -114, -227, -257, 196, 181, -220, -151, 198, 219, -15, -481, 65, -239, -254, -406, 465, 163, 322, -218, -26, 202, 500, 442, 44, -11, 249, -346, 238, -247, -242, 430, -453, 443, 489, 381, -262, -113, 397, -313, -416, 174, -350, -201, 313, 490, -377, 270, 199, -400, -104, -253, 317, -140, 276, 291, -252, 270, -365, -194, -144, 393, -220, 182, -50, -25, -107, 285, 115, -244, 242, 271, 140, 212, 309, 357, -438, 264, -115, 169, 388, -332, 356, -469, 387, 111, -402, 9, -31, -415, 211, -378, -184, -189, -58, -105, 48, -207, 121, -408, -245, 353, -437, 237, 431, -432, 170, -18, -413, -212, -446, 179, -423, 311, -266, -335, 461, -128, -61, -124, -19, -451, -466, -306, -94, 149, -493, 55, 35, 353, 225, -138, -317, -140, -178, -136, 258, 247, 436, 107, -209, -304, 407, 86, -350, 411, -335, 449, 110, -491, -185, 227, -398, -120, -314, -150, 395, -379, -25, 324, 284, 163, 169, 326, -349, -491, 441, 356, -481, 329, 59, 489, 316, -138, -395, 433, -446, -145, 281, 465, 162, -220, -332, -303, 80, 405, -194, -391, 190, -118, -19, 149, -192, 204, 64, -8, 84, 392, 34, 405, 57, 172, -465, 382, -495, -154, 204, 381, -124, -278, 445, -204, -109, 381, -14, 0, 139, 206, 418, -93, -493, 361, 454, 194, -291, -443, 257, -171, -476, -80, 56, 152, -350, -397, 220, -149, 243, 261, 219, -354, -311, -68, -418, -120, 318, -109, -381, -366, -323, -451, 137, -51, 150, 289, -424, 160, 120, -350, 298, -115, -241, -272, -358, -462, -380, -152, -52, 66, 154, -39, -419, -114, -254, 75, 335, 109, -179, 21, 247, 119, 275, -238, 116, -274, 221, -386, 476, 324, 370, -139, -259, -221, -71, -405, 393, 19, -26, 155, 146, 330, -367, 221, -466, 282, 464, 129, -342, 48, -211, 111, 7, -43, 121, 291, -489, -260, -186, -122, -17, 100, -392, 360, 268, -445, -231, -45, 54, -10, -104, 267, -440, 198, -72, -477, -202, 112, 402, -424, -186, 209, 203, -102, 304, 440, -432, -266, 433, 496, 34, 195, 229, -324, 263, 326, -424, 234, -195, -350, -381, -303, 411, 175, -99, 295, 342, 35, 217, 374, -347, 37, -77, -196, -72, -362, 8, -416, -358, -375, -12, 11, 465, -320, -297, 197, 273, 498, -249, -374, -91, 419, 270, -183, -396, 362, 201, -60, 112, 303, 293, 215, 13, 135, -241, -197, 184, 447, 115, 459, 426, -245, 6, -57, -419, 462, -383, -188, -441, 104, -362, 121, -260, -191, 200, 330, -255, 336, 426, -313, 225, -195, -225, -482, -239, -154, 57, -146, -129, -21, -58, -468, -490, -315, 407, 173, -84, -394, 128, -364, 289, -109, -138, -423, 428, -476, -342, -402, 176, -335, 119, 259, 387, -121, -150, -217, -305, 113, 210, -268, -412, -38, -278, 418, 33, -152, 191, -39, 236, 292, -353, -13, 276, 492, -136, 258, 402, -8, 190, -318, -300, 357, 172, 203, -6, -410, 121, -493, -114, -328, -59, 287, 202, -459, 20, 378, -273, -368, -374, 104, -67, -287, 299, 331, -111, 327, -460, -93, 67, 492, -85, -370, -235, -330, 345, -169, 22, 77, -52, 312, -254, 94, 294, 293, -153, -497, -375, 192, -82, 185, 87, -477, 199, 497, 327, -466, 310, -352, -352, -444, -370, -76, 101, -351, -233, 109, -240, 259, -129, -363, 466, -28, -267, -424, 110, -174, 108, -294, 474, -230, 372, -173, -310, -80, 113, 241, 4, 181, -184, -226, -443, -498, 3, 464, 50, -370, 213, 108, 447, -148, 81, 257]
// candy(A)

//Lightweight
// module.exports = { 
// 	//param A : array of integers
// 	//return an integer
// 	lis : function(A){
//        if(A.length == 0) return 0;
//        var dp = new Array(A.length);
//        var max = 0;
//        for(var i = 0; i < A.length; i++) {
//            dp[i] = 1;
//            for(var j = i - 1; j >= 0 ; j--) {
//                if(A[i] > A[j]) dp[i] = Math.max(dp[i], dp[j] + 1);
//                //else dp[i] = Math.max(dp[i], dp[j]);
//            }
//        }
       
//        for(var i = 0; i < A.length ; i++) {
//             max = Math.max(max, dp[i]);   
//        }
//        return max;
// 	}
// };

// Fastest
// module.exports = { 
 //param A : array of integers
 //return an integer
//     lis : function(A){
//         if(A.length<2) return A.length;
        
//         var stack = [];
        
//         for(var i = 0; i<A.length;i++){
//             pushStack(stack, A[i]);    
//         }
        
        
//         function pushStack(stack, a){
//             if(stack.length===0){
//                 stack.push(a);
//                 return;
//             }
        
//             var i = stack.length -1;
//             while(i>=0){
//                 if(a > stack[i]){
//                     stack[i+1] = a;
//                     return;
//                 }
                
//                 i--;
//             }
            
//             if(i===-1){
//                 stack[0] =a;
//             }
//             return;
//         }
        
//         return stack.length;
//     }
// };
//Editorial

// module.exports = { 
// 	//param A : array of integers
// 	//return an integer
// 	lis : function(A) {
// 	    var result = new Array(A.length);
// 	    for (var i=0;i<A.length;i++) {
// 	        result[i] = 1;
// 	    }
	    
// 	    for (var i=1; i<A.length; i++) {
// 	        for (var j=0; j<i; j++) {
// 	            if (A[j] < A[i] && result[i] < result[j]+1) {
// 	                result[i] = result[j] + 1;
// 	            }
// 	        }
// 	    }
	    
// 	    return Math.max.apply(null, result);
// 	}
// };

// function CeilIndex(A , l , r , key) {
//     while (r - l > 1) {
//         var m = l + parseInt((r - l) / 2);
//         if (A[m] >= key)
//             r = m;
//         else
//             l = m;
//     }

//     return r;
// }

// function lis(A)
// {
 
//     // Add boundary case, when array size is one
//     let size = A.length
//     var tailTable = Array(size).fill(0);
//     var len; // always points empty slot

//     tailTable[0] = A[0];
//     len = 1;
//     for (var i = 1; i < size; i++) {
//         if (A[i] < tailTable[0])
//            {
//                console.log(A[i],tailTable[0])
//                 // new smallest value
//             tailTable[0] = A[i];
//            }

//         else if (A[i] > tailTable[len - 1]){
//             console.log("111111111111111111",A[i], tailTable[len - 1], len)
//             // A[i] wants to extend largest subsequence
//             tailTable[len++] = A[i];
//         }
//         else
//             {
//                 console.log(len)
//                 // A[i] wants to be current end candidate of an existing
//             // subsequence. It will replace ceil value in tailTable
//             tailTable[CeilIndex(tailTable, -1, len - 1, A[i])] = A[i];
//             }
//     }
//     // console.log(len)
//     return len;
// }


// // lis([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15])
// lis([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15])
// function solve(A, B){
//     let curr = -1
//     let count = 0, start, end, visited = [], arr = []
//     for(let i = 0; i < A.length; i++){
//         start = curr-B+1
//         end = curr+B-1
//         if(start)
//     }
    // for(let i = 0; i < A.length; i++){
    //     // start = i-B+1
    //     // end = i+B-1
    //     arr.push({id:i,val:A[i],visited:false})
    // }
    // let i = 0
    // while(i < A.length){
    //     if(A[i] === 0) i++;
    //     else {
    //         start = i-B+1 < 0 ? 0 : i-B+1
    //         end=i+B-1
    //         if(end > A.length-1) end = A.length-1
    //         else end = i+B-1
    //         if(end + 1 === 0){
    //             count = -1
    //             break
    //         }
    //         for(let j = start; j <= end; j++)
    //         if(arr[j]) arr[j].visited = true
    //         i = end
    //         count++
    //     }
    //     i++
    // }
    // for(let i = 0; i < arr.length; i++){
    //     if(!arr[i].visited){
    //         count = -1
    //         break;
    //     }
    // }
//     console.log(count)
//     return count
// }
// function solve(arr){
//     let ans = 0,n = arr.length
//     for (let i = 1; i < n - 1; ++i) {
//         let max1 = 0, max2 = 0;
//         for (let j = 0; j < i; ++j)
//             if (arr[j] < arr[i])
//                 max1 = Math.max(max1, arr[j]);
//         for (let j = i + 1; j < n; ++j)
//             if (arr[j] > arr[i])
//                 max2 = Math.max(max2, arr[j]);
//         if(max1 && max2)
//             ans=Math.max(ans,max1+arr[i]+max2);
//             console.log(max1, max2, arr[i], ans)
//     }
//     console.log(ans)
//     return ans;
// }
function solve(arr){
    let triplets = []
    for(let i = 0; i < arr.length; i++){
        let j = i+1, k = arr.length-1
        while(j<k){
                triplets.push([arr[i], arr[j]])
                j++
        }
    }
    let newPairs = []
    for(let i = 0; i < triplets.length; i++){
        let [a, b, c] = triplets[i]
        if(c > b && b > a){
            newPairs.push([a,b,c])
        }
    }
    console.log(newPairs)
}
// let A =  [18468, 6335, 26501, 19170, 15725, 11479, 29359, 26963, 24465, 5706, 28146, 23282, 16828, 9962, 492, 2996, 11943, 4828, 5437, 32392, 14605]
let A = [2, 5, 3, 1, 4, 9]
solve(A)